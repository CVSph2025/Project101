<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

class DeepProjectAnalysis extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'app:deep-project-analysis';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Perform deep analysis of the entire project';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîç DEEP PROJECT ANALYSIS STARTING...');
        $this->info('=====================================');
        
        $issues = [];
        $recommendations = [];
        
        // 1. Check Controllers
        $this->info("\nüìÅ ANALYZING CONTROLLERS...");
        $controllerIssues = $this->analyzeControllers();
        $issues = array_merge($issues, $controllerIssues);
        
        // 2. Check Models
        $this->info("\nüìä ANALYZING MODELS...");
        $modelIssues = $this->analyzeModels();
        $issues = array_merge($issues, $modelIssues);
        
        // 3. Check Views
        $this->info("\nüé® ANALYZING VIEWS...");
        $viewIssues = $this->analyzeViews();
        $issues = array_merge($issues, $viewIssues);
        
        // 4. Check Routes
        $this->info("\nüõ£Ô∏è ANALYZING ROUTES...");
        $routeIssues = $this->analyzeRoutes();
        $issues = array_merge($issues, $routeIssues);
        
        // 5. Check Database
        $this->info("\nüóÑÔ∏è ANALYZING DATABASE...");
        $dbIssues = $this->analyzeDatabase();
        $issues = array_merge($issues, $dbIssues);
        
        // 6. Check Middleware
        $this->info("\nüõ°Ô∏è ANALYZING MIDDLEWARE...");
        $middlewareIssues = $this->analyzeMiddleware();
        $issues = array_merge($issues, $middlewareIssues);
        
        // 7. Check Configuration
        $this->info("\n‚öôÔ∏è ANALYZING CONFIGURATION...");
        $configIssues = $this->analyzeConfiguration();
        $issues = array_merge($issues, $configIssues);
        
        // 8. Generate recommendations
        $this->info("\nüí° GENERATING RECOMMENDATIONS...");
        $recommendations = $this->generateRecommendations();
        
        // Display results
        $this->displayResults($issues, $recommendations);
        
        return 0;
    }
    
    private function analyzeControllers(): array
    {
        $issues = [];
        $controllerPath = app_path('Http/Controllers');
        
        if (!File::exists($controllerPath)) {
            $issues[] = "‚ùå Controllers directory missing: {$controllerPath}";
            return $issues;
        }
        
        $controllers = File::allFiles($controllerPath);
        $this->info("Found " . count($controllers) . " controller files");
        
        foreach ($controllers as $controller) {
            $content = File::get($controller->getRealPath());
            $className = str_replace([app_path(), '/', '.php'], ['', '\\', ''], $controller->getRealPath());
            
            // Check for missing methods
            if (strpos($content, 'index') === false && strpos($content, 'ResourceController') === false) {
                $issues[] = "‚ö†Ô∏è Controller {$controller->getFilename()} might be missing index method";
            }
            
            // Check for proper namespace
            if (!preg_match('/namespace App\\\\Http\\\\Controllers/', $content)) {
                $issues[] = "‚ùå Controller {$controller->getFilename()} has incorrect namespace";
            }
        }
        
        return $issues;
    }
    
    private function analyzeModels(): array
    {
        $issues = [];
        $modelPath = app_path('Models');
        
        if (!File::exists($modelPath)) {
            $issues[] = "‚ùå Models directory missing: {$modelPath}";
            return $issues;
        }
        
        $models = File::files($modelPath);
        $this->info("Found " . count($models) . " model files");
        
        foreach ($models as $model) {
            $content = File::get($model->getRealPath());
            $modelName = str_replace('.php', '', $model->getFilename());
            
            // Check if table exists for model
            if ($modelName !== 'User') {
                $tableName = \Illuminate\Support\Str::snake(\Illuminate\Support\Str::plural($modelName));
                if (!Schema::hasTable($tableName)) {
                    $issues[] = "‚ùå Table '{$tableName}' missing for model {$modelName}";
                }
            }
            
            // Check for fillable property
            if (!preg_match('/protected \$fillable/', $content)) {
                $issues[] = "‚ö†Ô∏è Model {$modelName} missing \$fillable property";
            }
        }
        
        return $issues;
    }
    
    private function analyzeViews(): array
    {
        $issues = [];
        $viewPath = resource_path('views');
        
        if (!File::exists($viewPath)) {
            $issues[] = "‚ùå Views directory missing: {$viewPath}";
            return $issues;
        }
        
        $views = File::allFiles($viewPath);
        $this->info("Found " . count($views) . " view files");
        
        // Check for required views
        $requiredViews = [
            'homepage.blade.php',
            'dashboard.blade.php',
            'auth/login.blade.php',
            'auth/register.blade.php',
            'layouts/app.blade.php',
            'layouts/guest.blade.php'
        ];
        
        foreach ($requiredViews as $requiredView) {
            $viewFile = $viewPath . '/' . $requiredView;
            if (!File::exists($viewFile)) {
                $issues[] = "‚ùå Required view missing: {$requiredView}";
            }
        }
        
        return $issues;
    }
    
    private function analyzeRoutes(): array
    {
        $issues = [];
        
        try {
            $routes = Route::getRoutes();
            $this->info("Found " . count($routes) . " routes");
            
            // Check for duplicate routes
            $routeUris = [];
            foreach ($routes as $route) {
                $uri = $route->uri();
                if (isset($routeUris[$uri])) {
                    $issues[] = "‚ö†Ô∏è Duplicate route found: {$uri}";
                }
                $routeUris[$uri] = true;
            }
            
        } catch (\Exception $e) {
            $issues[] = "‚ùå Route analysis failed: " . $e->getMessage();
        }
        
        return $issues;
    }
    
    private function analyzeDatabase(): array
    {
        $issues = [];
        
        try {
            // Test database connection
            DB::connection()->getPdo();
            $this->info("‚úÖ Database connection successful");
            
            // Check required tables
            $requiredTables = ['users', 'properties', 'bookings', 'roles', 'permissions'];
            
            foreach ($requiredTables as $table) {
                if (!Schema::hasTable($table)) {
                    $issues[] = "‚ùå Required table missing: {$table}";
                } else {
                    $count = DB::table($table)->count();
                    $this->info("Table {$table}: {$count} records");
                }
            }
            
        } catch (\Exception $e) {
            $issues[] = "‚ùå Database connection failed: " . $e->getMessage();
        }
        
        return $issues;
    }
    
    private function analyzeMiddleware(): array
    {
        $issues = [];
        $middlewarePath = app_path('Http/Middleware');
        
        if (!File::exists($middlewarePath)) {
            $issues[] = "‚ùå Middleware directory missing: {$middlewarePath}";
            return $issues;
        }
        
        $middlewares = File::files($middlewarePath);
        $this->info("Found " . count($middlewares) . " middleware files");
        
        // Check for required middleware
        $requiredMiddleware = [
            'SecurityMiddleware.php',
            'EnhancedInputValidationMiddleware.php'
        ];
        
        foreach ($requiredMiddleware as $middleware) {
            if (!File::exists($middlewarePath . '/' . $middleware)) {
                $issues[] = "‚ùå Required middleware missing: {$middleware}";
            }
        }
        
        return $issues;
    }
    
    private function analyzeConfiguration(): array
    {
        $issues = [];
        
        // Check environment variables
        $requiredEnvVars = [
            'APP_NAME', 'APP_ENV', 'APP_KEY', 'APP_DEBUG', 'APP_URL',
            'DB_CONNECTION', 'DB_DATABASE'
        ];
        
        foreach ($requiredEnvVars as $envVar) {
            if (!env($envVar)) {
                $issues[] = "‚ö†Ô∏è Environment variable missing or empty: {$envVar}";
            }
        }
        
        // Check config files
        $configPath = config_path();
        $requiredConfigs = ['app.php', 'database.php', 'auth.php'];
        
        foreach ($requiredConfigs as $config) {
            if (!File::exists($configPath . '/' . $config)) {
                $issues[] = "‚ùå Required config file missing: {$config}";
            }
        }
        
        return $issues;
    }
    
    private function generateRecommendations(): array
    {
        $recommendations = [
            "üöÄ PERFORMANCE ENHANCEMENTS:",
            "‚Ä¢ Implement Redis caching for frequently accessed data",
            "‚Ä¢ Add database query optimization and indexing",
            "‚Ä¢ Implement API rate limiting per user/IP",
            "‚Ä¢ Add image optimization and CDN integration",
            "‚Ä¢ Implement lazy loading for property images",
            "",
            "üîí SECURITY ENHANCEMENTS:",
            "‚Ä¢ Add CSRF protection to all forms",
            "‚Ä¢ Implement two-factor authentication",
            "‚Ä¢ Add API authentication with Laravel Sanctum",
            "‚Ä¢ Implement content security policy headers",
            "‚Ä¢ Add audit logging for admin actions",
            "",
            "üì± USER EXPERIENCE ENHANCEMENTS:",
            "‚Ä¢ Add progressive web app (PWA) features",
            "‚Ä¢ Implement real-time notifications",
            "‚Ä¢ Add search filters and sorting options",
            "‚Ä¢ Implement wishlist/favorites functionality",
            "‚Ä¢ Add property comparison feature",
            "",
            "üèóÔ∏è CODE QUALITY ENHANCEMENTS:",
            "‚Ä¢ Add comprehensive unit and feature tests",
            "‚Ä¢ Implement API documentation with Swagger",
            "‚Ä¢ Add code coverage reporting",
            "‚Ä¢ Implement automated code quality checks",
            "‚Ä¢ Add database seeders for testing data",
            "",
            "üìä MONITORING & ANALYTICS:",
            "‚Ä¢ Add application performance monitoring",
            "‚Ä¢ Implement error tracking with Sentry",
            "‚Ä¢ Add user analytics and behavior tracking",
            "‚Ä¢ Implement business intelligence dashboard",
            "‚Ä¢ Add automated backup system"
        ];
        
        return $recommendations;
    }
    
    private function displayResults(array $issues, array $recommendations): void
    {
        $this->info("\n" . str_repeat("=", 50));
        $this->info("üìã ANALYSIS RESULTS");
        $this->info(str_repeat("=", 50));
        
        if (empty($issues)) {
            $this->info("‚úÖ No critical issues found!");
        } else {
            $this->error("\nüö® ISSUES FOUND:");
            foreach ($issues as $issue) {
                $this->line("  " . $issue);
            }
        }
        
        $this->info("\nüí° ENHANCEMENT RECOMMENDATIONS:");
        foreach ($recommendations as $recommendation) {
            $this->line("  " . $recommendation);
        }
        
        $this->info("\n" . str_repeat("=", 50));
        $this->info("Analysis completed successfully!");
        $this->info(str_repeat("=", 50));
    }
}
